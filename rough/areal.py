# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_areal.ipynb.

# %% auto 0
__all__ = ['Sa', 'Sms', 'Ssk', 'Sku', 'Sp', 'Sv', 'Sz']

# %% ../02_areal.ipynb 3
from .data import *
from .profile import *

import numpy as np
from matplotlib import pyplot as plt
from scipy.stats import skew, kurtosis
from scipy.signal import find_peaks

# %% ../02_areal.ipynb 7
def Sa(im, #Numpy array or arraylike. typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
        norm = True,
        axis = None,
        sections = False, #If true, calculates the Sa of the stack of images, (i.e. sets axis = (1,2))
        **kwargs
      ):
    '''
    Calculates the mean absolute difference from the mean plane. Equivalent to Ra(array, axis = None)
    '''
    if sections:
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims=True)
        
    return np.mean(np.absolute(im), axis = axis)

# %% ../02_areal.ipynb 9
def Sms(im, #Numpy array or arraylike. typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
        norm = True,
        axis = None,
        sections = False, #If true, calculates the Sms of the stack of images, (i.e. sets axis = (1,2))
        **kwargs
       ):
    '''
    Calculates the root mean square difference from the mean plane. Equivalent to Rms(array, axis = None)
    '''
    if sections:
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims = True)

    return np.sqrt(np.mean(np.square(im), axis = axis))

# %% ../02_areal.ipynb 11
def Ssk(im, #Numpy array or arraylike. typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
        norm = True,
        axis = None,
        sections = False, #If true, calculates the Ssk of the stack of images, (i.e. sets axis = (1,2))
        **kwargs
       ):
    '''
    Calculates the Skew of the section. Equivalent to Rsk(im, axis = None) for an (m,n) array
    '''
    if sections:
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims = True)
     
    return skew(a = im, axis=axis, **kwargs)
        
        

# %% ../02_areal.ipynb 13
def Sku(im, #Numpy array or arraylike. typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
        norm = True,
        axis = None,
        sections = False, #If true, calculates the Sku of the stack of images, (i.e. sets axis = (1,2))
        **kwargs #Keyword arguments to modify the behavior of scipy.stats:kurtosis
       ):
    '''
    Calculates the Kurtosis of the section. Equivalent to Rku(im, axis = None) for an (m,n) array
    '''
    if sections:
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims = True)
     
    return kurtosis(a = im, axis=axis, **kwargs)

# %% ../02_areal.ipynb 16
def Sp(im, #Numpy array or arraylike. typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
        norm = True,
        axis = None,
        sections = False, #If true, calculates the Sp of the stack of images, (i.e. sets axis = (1,2))
        **kwargs #keyword arguments to modify behaviour of numpy.amax
       ):
    '''
    Calculates the maximum peak height of the surface
    '''
    if sections: 
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims = True)
    
    return np.amax(im, axis = axis, **kwargs)

# %% ../02_areal.ipynb 18
def Sv(im, #Numpy array or arraylike. typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
       norm = True,
       axis = None,
       sections = False, #If true, calculates the Sv of the stack of images , (i.e. sets axis = (1,2))
       **kwargs #keyword arguments to modify behaviour of numpy.amin
      ):
    '''
    Calculates the absolute maximum pit depth of the surface
    '''
    if sections:
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims = True)
    
    return abs(np.amin(im,axis = axis, **kwargs))

# %% ../02_areal.ipynb 20
def Sz(im, #Numpy array or arraylike, typically (m,n) for 1 array or (k,m,n) for k (m,n) stacked arrays
       norm = True,
       axis = None,
       sections = False, #If true, calculates the Sz of the stack of images, (i.e. sets axis = (1,2))
       **kwargs #keyword arguments to be passed to numpy.ptp
      ):
    '''
    Calculates the maximum height (max peak + absolute max pit) of the surface. Synonymous with the range of height
    values or peak to peak. 
    '''
    if sections:
        axis = (1,2)
    if norm:
        im = im - np.mean(im, axis = axis, keepdims = True)
        
    return np.ptp(im, axis = axis, **kwargs)
    
